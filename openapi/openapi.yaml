openapi: '3.0.3'


info:
  title: sh api
  version: n0.1
servers:
  - url: '{api_domain}/api/{api_version}'
    variables:
      api_domain:
        default: https://dev.simple-home.liis.su
        enum:
          - https://dev.simple-home.liis.su  # Development server
          - https://simple-home.liis.su  # Production server
          - http://localhost:8080  # Local server
      api_version:
        default: v2
        enum:
          - v2
          - v1


security:
  - BearerAuth: []

paths:
  /admin/login:
    post:
      operationId: admin_login
      tags:
        - login
      parameters:
        - in: header
          name: X-Schema
          schema:
            type: string
            example: public
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
                client_unique_id:
                  type: string
      responses:
        "200":
          description: Успешная авторизация

  /admin/automations:
    $ref: ./paths/automations/AdminAutomationsEndpoints.yaml

  /admin/automations/{automation_id}:
    $ref: ./paths/automations/AdminAutomationEndpoints.yaml
    
  /admin/automations/clone/{automation_id}:
    $ref: ./paths/automations/AdminCloneAutomationsEndpoints.yaml
  
  /automations/{automation_id}:
    $ref: ./paths/automations/UserAutomationEndpoints.yaml

  /automation_triggers:
    $ref: ./paths/automation_triggers/UserAutomationsTriggers.yaml

  /automation_triggers/{automation_trigger_id}:
    $ref: ./paths/automation_triggers/UserAutomationTriggers.yaml
  
  /admin/automation_triggers:
    $ref: ./paths/automation_triggers/AdminAutomationsTriggers.yaml

  /admin/automation_triggers/{automation_trigger_id}:
    $ref: ./paths/automation_triggers/AdminAutomationTriggers.yaml

  /automation_actions/{automation_action_id}:
    $ref: ./paths/automation_actions/UserAutomationAction.yaml

  /automation_actions:
    $ref: ./paths/automation_actions/UserAutomationsActions.yaml

  /admin/automation_actions/{automation_action_id}:
    $ref: ./paths/automation_actions/AdminAutomationAction.yaml

  /admin/automation_actions:
    $ref: ./paths/automation_actions/AdminAutomationsActions.yaml

  /admin/residences/{id}:
    put:
      operationId: update
      description: Обновляет объект резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateResidence"
      responses:
        '201':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResidence"

        '404':
          description: Резиденция не найдена
          # content:
            # 'Not Found!'

        '400':
          description: Изображение не найдено
          # Image Id {image_id} Does Not Exists!

    get:
      operationId: retrieve
      description: Получение резиденции по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Объект резиденции
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResidence"

    delete:
      operationId: delete
      description: Удаляет резиденцию по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Резиденция успешно удалена
        '404':
          description: Резиденция не существует

  /admin/residences:
    get:
      operationId: list
      description: Получение списка доступных резиденций
      tags:
        - residences
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: string
        - in: query
          name: max_result
          required: false
          schema:
            type: string
        - in: query
          name: sort
          required: false
          schema:
            type: string
        - in: query
          name: search
          required: false
          schema:
            type: string

        - in: query
          name: create_dt_after
          required: false
          schema:
            type: string

        - in: query
          name: updated_dt_after
          required: false
          schema:
            type: string

      responses:
        '200':
          description: Успешное получение списка резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RetrieveResidence"

    post:
      operationId: create
      description: Создание резиденции
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateResidence"
      responses:
        '201':
          description: Резиденция успешно создана
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResidence"

    delete:
      operationId: delete_multiple
      description: Множественное удаление резиденций по их id
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              type: object 
              properties:
                id:
                  type: string
                  description: список с id резиденций, которые требуется удалить
                  example: "[1,2,3,4]"
      responses:
        '200':
          description: Успешное удаление резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: "#/components/schemas/RetrieveResidence"

  /admin/residences_and_apartments:
    get:
      operationId: get_residences_and_apartments
      description: WARNING! GOVNOROUTE.
                   Этот роут возвращаеет все резиденты доступные пользователю с апартаментами.
                   Логика выдачи апартаментов - тайна за семью печатями
      tags:
        - residences
      responses:
        '200':
          description: Успешное получение резиденций с их апартаментами
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveResidenceWithApartments"

# этого метода не должно быть. Удалить его
# фронтенд получает эти данные, чтобы считать кол-во удаляемых объектов и выводить в модалке
# запрос нагруженный и дерьмовый. Я бы его переписал :/
  /admin/residences/get_list_related_entities:
    get:
      operationId: get_list_related_entities
      description: Получение доступных резиденций и 
      tags:
        - residences
      parameters:
        - in: path
          schema:
            type: integer
          name: residence_id
          required: true
        
      responses:
        '400':
          description: Id Must Be An Integer!
        
        '200':
          description: Успешное получение связанных с резиденцией данных
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: "#/components/schemas/RetrieveResidence"
                properties:
                  controller_ids:
                    type: array
                    items:
                      type: integer
                  driver_ids:
                    type: array
                    items:
                      type: integer
                  room_ids:
                    type: array
                    items:
                      type: integer
                  scenario_ids:
                    type: array
                    items:
                      type: integer
                  device_ids:
                    type: array
                    items:
                      type: integer

  /admin/residences/{pk:\d+}/buildings:
    get:
      operationId: retrieve_buildings
      description: Отдаёт список строений принадлежащих резиденции.
                   Доступно инженеру и выше
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          required: true
          description: id резиденции
          schema:
            type: integer
      responses:
        '200':
          description: Успешно возвращает список зданий резиденции
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
                    residence_id:
                      type: integer

  # доступы до резиденций
  /admin/residences_accesses/{pk}:
    post:
      operationId: multiple_create
      description: Множественное добавление досутпов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeResidenceAccess'

      responses:
        "201":
          description: перечисленные доступы успешно добавленны


    delete:
      operationId: multiple_delete
      description: Множественное удаление досутпов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: перечисленные доступы успешно удалены

    # роуты на интеграторов нужно перенести
  /admin/integrator:
    post:
      operationId: create
      description: создаёт нового интегратора. Метод доступен с роли суперпользователя
      tags:
        - integrators
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
               - title
              properties:
                title:
                  type: string
                  description: Название интегратора
      responses:
        '200':
          description: Интегратор успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveIntegrator'

    get:
      operationId: get_integrator
      description: Получить интегратора по произвольному полю.
                   Метод доступен с ролью engeneer и выше
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
        - in: query
          name: title
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение интегратора
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveIntegrator"

    delete:
      operationId: delete_integrator
      description: метод доступен только для суперпользователя
      tags:
        - integrators
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id удаляемого интегратора
      responses:
        '200':
          description: Успешное удаление интегратора
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetrieveIntegrator"
      

  /admin/integrators:
    get:
      operationId: get_integrators_paginated
      description: получить список всех интеграторов
      tags:
        - integrators
      responses:
        "200":
          description: список интеграторов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RetrieveIntegrator"

    patch:
      description: Обновление полей интегратора. Метод доступен только суперпользователям
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
          description: id по которому будем обновлять интегратора
        - in: query
          name: title
          required: false
          schema:
            type: string
          description: title по которому будем обновлять интегратора
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
      responses:
        '200':
          description: успешное обновление полей интегратора
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RetrieveIntegrator"

  # TODO: переименование данных методов
  #  преференсы-----------------------------------------------------------------------------------------------------------------
  /account_apartment_list_display_preferences:
    post:
      operationId: create_list_display_preferences
      tags:
        - preferences
      description: Создание преференса. Доступно пользователю и выше
                   Достаёт доступные пользователю апартаменты
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                global_scenarios:
                  type: array
                  description: список с какими-то сценариями
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id сценария
                      title:
                        type: string
                        description: название сценария

                global_security_order:
                  type: array
                  description: список хуй пойми с чем
                  items:
                    # TODO: заменить на enum
                    type: string
                
                rooms:
                  type: array
                  # TODO: wtf. Почему у объектов списка всего одно поле
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id комнат наверное
      responses:
        # TODO: статус 201 надо заменить на 200.
        # 201 используется в случае отсутствия данных в ответе
        "201":
          description: что-то произошло :/
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountApartmentListDisplayPreferences"
        # TODO: какой статус код ?
        # UserPermissionError

    # TODO: дописать
    get:
      # TODO: метод - полный кал, который стоит переписать
      operationId: retrieve_list_display_preferences
      description: Получение объекта. Доступно с ролью пользователя и выше.
                   По id пользователя достаёт единственную сущность AccountApartmentListDisplayPreferences
                   Итерируем данные апартаментов, лежащие в поле preferences полученного объекта
                   Убираем все апартаменты из поля preferences, которые недоступны пользователю.
      responses:
        "200":
          description: Успешное получение объекта
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: id апартаментов
                  account_id:
                    type: integer
                    # TODO: что за аккаунты могут быть
                    description: id некого аккаунта
                  updated_at:
                    type: string
                    format: date-time
                    example: "2022-02-14T11:59:37.945Z"
                  # TODO: абсолютно конченно устроено хранение данных на бэкенде
                  preferences:
                    type: array
                    items:
                      type: object
                      properties:
                        apartment_id:
                          type: integer
                        displayed_title:
                          type: string

  /account_apartment_list_display_preferences/{pk:\d+}:
    put:
      operationId: update_list_display_preferences
      description: Доступно юзеру и выше. Достаёт доступные апартаменты.
                   Проверяет может ли пользователь изменить преференсы
                   (может, если ему доступна резиденция). иначе выплёвывает
                   UserPermissionError. В случае успеха обновляет json поле preferences в 
                   AccountApartmentListDisplayPreferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  apartment_id:
                    type: integer
                  displayed_title:
                    type: string
                  displayed_image_hash:
                    type: string
                  displayed_image_id:
                    type: integer
      responses:
        '200':
          description: Обновлённый объект AccountApartmentListDisplayPreferences
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountApartmentListDisplayPreferences"
        '404':
          description: 0_0

    delete:
      operationId: delete_list_display_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: удаляемый объект не найден
        '204':
          description: удаление произведено

  /account_apartment_preferences:
    # Закончить описание
    post:
      operationId: create_account_apartment_preferences
      description: Достаёт объект AccountApartmentPreferences.
                   Создаёт новый преференс, если его не существует
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferences'
      responses:
        '201':
          description: Успешное создание чего-то
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferences2'

    get:
      operationId: retrieve_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: успешное получение преференсов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountApartmentPreferences2"
          
        '400':
          description: type of apartment_id must be integer

  /account_apartment_preferences/{pk:\d+}:
    put:
      operationId: update_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean
      requestBody:
        $ref: '#/components/schemas/AccountApartmentPreferences2'
      responses:
        '200':
          description: успешное обновление преференсов
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountApartmentPreferences2"

    delete:
      operationId: delete_account_apartment_preferences
      tags:
        - preferences
      description: удаление объекта AccountApartmentPreferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: успешное удаление AccountApartmentPreferences
        '204':
          description: успешное удаление

  /account_apartment_preferences/update_room_group_order/{pk:\d+}:
    put:
       operationId: update_room_groups_order
       parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer

        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean

       tags:
        - preferences
       responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"
        '404':
          description: Account Apartment Preferences Not Found!


  /account_apartment_preferences/delete_room_groups/{pk:\d+}:
    delete:
      operationId: delete_room_groups
      description: доступно с ролью пользователя и выше
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/AccountApartmentPreferences"
      responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"

  /account_apartment_preferences/set_default:
    post:
      operationId: set_default_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"
        # NotFound(f"Default preference for apartment with id {apartment_id} not found")

  /account_apartment_preferences/get_default:
    # TODO: на фронте не используется
    get:
      operationId: get_default_apartment_preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      tags:
        - preferences
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"

  /admin/account_apartment_default_preferences:
    post:
      operationId: create_account_apartment_default_preferences
      tags:
        - preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/AccountApartmentPreferences"
      responses:
        # TODO: должно быть 200.
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"

    get:
      operationId: retrieve_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"

  /admin/account_apartment_default_preferences/{pk:\d+}:
    put:
      operationId: update_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"
                # NotFound('Account Apartment Default Preferences Not Found!', 404)

    delete:
      operationId: delete_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
        '404':
          description: Account Apartment Default Preferences Not Found!


  /admin/account_apartment_default_preferences/update_room_groups_order/{pk:\d+}:
    put:
      operationId: update_room_groups_order
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "#/components/schemas/AccountApartmentPreferences"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "#/components/schemas/AccountApartmentPreferences2"
        '404':
          description: Account Apartment Default Preferences Not Found!

  /admin/account_apartment_default_preferences/delete_room_groups/{pk:\d+}:
    delete:
      operationId: delete_room_groups
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountApartmentPreferences2"
      responses:
        '200':
          description: "
            — Кто тебе дом строил? Здорово получилось…
            — Да пидорасы!
            — ??
            — Нанял рабочих залить фундамент.
              Выкопали, залили, ушли.
              Нанял каменщиков, те пришли спрашивают:
                Какие пидорасы фундамент заливали?
                Стены выложили, ушли.
                Нанял штукатуров, те тоже — что за пидорасы кладку делали?
              Ну, и так далее. Вот и получается,
              что дом строили одни пидорасы… "


components:
  schemas:
    UpdateResidence:
      $ref: './schemas/residences/UpdateResidence.yaml'

    CreateResidence:
      $ref: './schemas/residences/CreateResidence.yaml'

    RetrieveResidence:
      $ref: './schemas/residences/RetrieveResidence.yaml'

    ChangeResidenceAccess:
      $ref: './schemas/residences/ChangeResidenceAccess.yaml'

    RetrieveResidenceWithApartments:
      $ref: "./schemas/residences/RetrieveResidenceWithApartments.yaml"

    # апартаменты
    RetrieveApartments:
      $ref: './schemas/apartments/RetrieveApartments.yaml'

    # интеграторы
    RetrieveIntegrator:
      $ref: './schemas/integrators/RetrieveIntegrator.yaml'

    # преференсы
    AccountApartmentListDisplayPreferences:
      $ref: './schemas/preferences/AccountApartmentListDisplayPreferences.yaml'

    Preference:
      $ref: './schemas/preferences/Preference.yaml'

    AccountApartmentPreferences:
      $ref: './schemas/preferences/AccountApartmentPreferences.yaml'

    AccountApartmentPreferences2:
      $ref: './schemas/preferences/AccountApartmentPreferences2.yaml'


  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      